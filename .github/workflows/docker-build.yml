name: Docker builds
true:
  pull_request:
    branches:
    - master
    - release/*
    paths:
    - .actions/*
    - .github/workflows/docker-build.yml
    - dockers/**
    - requirements/*.txt
    - requirements/pytorch/**
    - requirements/fabric/**
    - setup.py
    - '!requirements/*/docs.txt'
    - '!*.md'
    - '!**/*.md'
    types:
    - opened
    - reopened
    - ready_for_review
    - synchronize
  push:
    branches:
    - master
    - release/*
  release:
    types:
    - published
  schedule:
  - cron: 0 0 * * *
  workflow_dispatch: {}
concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}-${{ github.event_name
    }}
env:
  PUSH_NIGHTLY: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    }}
  PUSH_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
    }}
jobs:
  build-NGC:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - uses: listendev/action@v0.11
      with:
        ci: only
        jwt: ${{ secrets.LSTN }}
    - continue-on-error: true
      name: Build Conda Docker
      timeout-minutes: 55
      uses: docker/build-push-action@v6
      with:
        file: dockers/nvidia/Dockerfile
        push: false
  build-cuda:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: listendev/action@v0.11
      with:
        ci: only
        jwt: ${{ secrets.LSTN }}
    - uses: docker/setup-buildx-action@v3
    - if: env.PUSH_NIGHTLY == 'true' && github.repository_owner == 'Lightning-AI'
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKER_PASSWORD }}
        username: ${{ secrets.DOCKER_USERNAME }}
    - timeout-minutes: 95
      uses: docker/build-push-action@v6
      with:
        build-args: 'PYTHON_VERSION=${{ matrix.python_version }}

          PYTORCH_VERSION=${{ matrix.pytorch_version }}

          CUDA_VERSION=${{ matrix.cuda_version }}

          '
        file: dockers/base-cuda/Dockerfile
        push: ${{ env.PUSH_NIGHTLY }}
        tags: pytorchlightning/pytorch_lightning:base-cuda-py${{ matrix.python_version
          }}-torch${{ matrix.pytorch_version }}-cuda${{ matrix.cuda_version }}
    - env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure() && env.PUSH_NIGHTLY == 'true'
      uses: ravsamhq/notify-slack-action@v2
      with:
        message_format: '{emoji} *{workflow}* {status_message}, see <{run_url}|detail>,
          cc: <@U01A5T7EY9M>'
        notification_title: ${{ format('CUDA; {0} py{1} for *{2}*', runner.os, matrix.python_version,
          matrix.pytorch_version) }}
        status: ${{ job.status }}
        token: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - cuda_version: 12.1.0
          python_version: '3.11'
          pytorch_version: '2.1'
        - cuda_version: 12.1.0
          python_version: '3.11'
          pytorch_version: '2.2'
        - cuda_version: 12.1.0
          python_version: '3.11'
          pytorch_version: '2.3'
        - cuda_version: 12.1.0
          python_version: '3.12'
          pytorch_version: '2.4'
  build-pl:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: listendev/action@v0.11
      with:
        ci: only
        jwt: ${{ secrets.LSTN }}
    - uses: docker/setup-buildx-action@v3
    - if: env.PUSH_RELEASE == 'true' && github.repository_owner == 'Lightning-AI'
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKER_PASSWORD }}
        username: ${{ secrets.DOCKER_USERNAME }}
    - if: github.event_name == 'release'
      name: Get release version
      run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
    - name: Set tags
      run: "import os\n\nrepo = \"pytorchlightning/pytorch_lightning\"\nver = os.getenv('RELEASE_VERSION')\n\
        py_ver = \"${{ matrix.python_version }}\"\npt_ver = \"${{ matrix.pytorch_version\
        \ }}\"\ncuda_ver = \"${{ matrix.cuda_version }}\"\ntags = [f\"latest-py{py_ver}-torch{pt_ver}-cuda{cuda_ver}\"\
        ]\nif ver:\n  tags += [f\"{ver}-py{py_ver}-torch{pt_ver}-cuda{cuda_ver}\"\
        ]\nif py_ver == '3.11' and pt_ver == '2.3' and cuda_ver == '12.1.0':\n  tags\
        \ += [\"latest\"]\n\ntags = [f\"{repo}:{tag}\" for tag in tags]\nwith open(os.getenv('GITHUB_ENV'),\
        \ \"a\") as gh_env:\n    gh_env.write(\"DOCKER_TAGS=\" + \",\".join(tags))\n"
      shell: python
    - timeout-minutes: 35
      uses: docker/build-push-action@v6
      with:
        build-args: 'PYTHON_VERSION=${{ matrix.python_version }}

          PYTORCH_VERSION=${{ matrix.pytorch_version }}

          CUDA_VERSION=${{ matrix.cuda_version }}

          LIGHTNING_VERSION=${{ env.RELEASE_VERSION }}

          '
        file: dockers/release/Dockerfile
        push: ${{ env.PUSH_RELEASE }}
        tags: ${{ env.DOCKER_TAGS }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - cuda_version: 12.1.0
          python_version: '3.11'
          pytorch_version: '2.1'
        - cuda_version: 12.1.0
          python_version: '3.11'
          pytorch_version: '2.2'
        - cuda_version: 12.1.0
          python_version: '3.11'
          pytorch_version: '2.3'
        - cuda_version: 12.1.0
          python_version: '3.12'
          pytorch_version: '2.4'
