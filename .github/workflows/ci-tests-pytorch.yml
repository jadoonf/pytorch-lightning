name: Test PyTorch
true:
  pull_request:
    branches:
    - master
    - release/*
    paths:
    - .actions/*
    - requirements/ci.txt
    - requirements/pytorch/**
    - src/lightning/pytorch/**
    - src/pytorch_lightning/*
    - tests/tests_pytorch/**
    - tests/legacy/**
    - pyproject.toml
    - .github/workflows/ci-tests-pytorch.yml
    - requirements/fabric/**
    - src/lightning/fabric/**
    - src/lightning_fabric/*
    - '!requirements/pytorch/docs.txt'
    - '!*.md'
    - '!**/*.md'
    types:
    - opened
    - reopened
    - ready_for_review
    - synchronize
  push:
    branches:
    - master
    - release/*
  schedule:
  - cron: 0 0 * * *
concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
defaults:
  run:
    shell: bash
jobs:
  pl-cpu:
    env:
      DISABLE_MPS: ${{ matrix.os == 'macOS-14' && '1' || '0' }}
      FREEZE_REQUIREMENTS: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref,
        'refs/heads/release/')) }}
      PACKAGE_NAME: ${{ matrix.pkg-name }}
      PYPI_CACHE_DIR: _pip-wheels
      TORCH_URL: https://download.pytorch.org/whl/cpu/torch_stable.html
      TORCH_URL_STABLE: https://download.pytorch.org/whl/cpu/torch_stable.html
      TORCH_URL_TEST: https://download.pytorch.org/whl/test/cpu/torch
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: listendev/action@v0.11
      with:
        ci: only
        jwt: ${{ secrets.LSTN }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: basic setup
      run: pip install -q -r .actions/requirements.txt
    - if: ${{ matrix.requires == 'oldest' }}
      name: Set min. dependencies
      run: python .actions/assistant.py replace_oldest_ver
    - if: ${{ matrix.requires != 'oldest' }}
      name: Adjust PyTorch versions in requirements files
      run: "pip install -q -r requirements/ci.txt\npython -m wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/adjust-torch-versions.py\n\
        for fpath in `ls requirements/**/*.txt`; do \\\n  python ./adjust-torch-versions.py\
        \ $fpath ${{ matrix.pytorch-version }}; \\\ndone\ncat requirements/pytorch/base.txt\n"
    - name: pip wheels cache
      uses: actions/cache/restore@v4
      with:
        key: pypi_wheels
        path: ${{ env.PYPI_CACHE_DIR }}
    - run: 'mkdir -p $PYPI_CACHE_DIR

        ls -lh $PYPI_CACHE_DIR

        '
    - name: Env. variables
      run: '# Switch PyTorch URL

        python -c "print(''TORCH_URL='' + str(''${{env.TORCH_URL_TEST}}'' if ''${{
        matrix.pytorch-version }}'' == ''2.5'' else ''${{env.TORCH_URL_STABLE}}''))"
        >> $GITHUB_ENV

        # Switch coverage scope

        python -c "print(''COVERAGE_SCOPE='' + str(''lightning'' if ''${{matrix.pkg-name}}''
        == ''lightning'' else ''pytorch_lightning''))" >> $GITHUB_ENV

        # if you install mono-package set dependency only for this subpackage

        python -c "print(''EXTRA_PREFIX='' + str('''' if ''${{matrix.pkg-name}}''
        != ''lightning'' else ''pytorch-''))" >> $GITHUB_ENV

        # Avoid issue on Windows with PyTorch 2.4: "RuntimeError: use_libuv was requested
        but PyTorch was build without libuv support"

        python -c "print(''USE_LIBUV=0'' if ''${{matrix.os}}'' == ''windows-2022''
        and ''${{matrix.pytorch-version}}'' == ''2.4'' else '''')" >> $GITHUB_ENV

        '
    - name: Install package & dependencies
      run: "pip install \".[${EXTRA_PREFIX}extra,${EXTRA_PREFIX}test,${EXTRA_PREFIX}strategies]\"\
        \ -U --prefer-binary \\\n  -r requirements/_integrations/accelerators.txt\
        \ \\\n  --find-links=\"${TORCH_URL}\" --find-links=\"${PYPI_CACHE_DIR}\"\n\
        pip list\n"
      timeout-minutes: 20
    - if: ${{ matrix.pkg-name != 'lightning' }}
      name: Drop LAI from extensions
      run: pip uninstall -y lightning
    - if: ${{ matrix.pkg-name == 'lightning' }}
      name: Drop PL for LAI
      run: pip uninstall -y pytorch-lightning
    - continue-on-error: true
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      name: Dump handy wheels
      uses: ./.github/actions/pip-wheels
      with:
        cache-key: pypi_wheels
        torch-url: ${{ env.TORCH_URL }}
        wheel-dir: ${{ env.PYPI_CACHE_DIR }}
    - name: Cache datasets
      uses: actions/cache@v4
      with:
        key: pl-dataset
        path: Datasets
    - name: Sanity check
      run: 'set -e

        python requirements/pytorch/check-avail-extras.py

        python -c "from torch import __version__ as ver; assert ver.startswith(''${{
        matrix.pytorch-version }}''), ver"

        '
    - if: ${{ matrix.pkg-name != 'lightning' }}
      name: Adjust tests / env. -> PL
      run: "python .actions/assistant.py copy_replace_imports --source_dir=\"./tests\"\
        \ \\\n  --source_import=\"lightning.fabric,lightning.pytorch\" \\\n  --target_import=\"\
        lightning_fabric,pytorch_lightning\"\n"
    - name: Prevent using raw source
      run: rm -rf src/
    - name: Get legacy checkpoints
      run: 'bash .actions/pull_legacy_checkpoints.sh

        cd tests/legacy

        bash generate_checkpoints.sh

        ls -l checkpoints/

        '
    - name: Testing Warnings
      run: python utilities/test_warnings.py
      working-directory: tests/tests_pytorch
    - name: Testing PyTorch
      run: "echo $GITHUB_RUN_ID\npython -m coverage run --source ${{ env.COVERAGE_SCOPE\
        \ }} \\\n  -m pytest . -v --timeout=60 --durations=50 --random-order-seed=$GITHUB_RUN_ID\n"
      working-directory: tests/tests_pytorch
    - if: success()
      name: Statistics
      run: 'coverage report

        coverage xml

        '
      working-directory: tests/tests_pytorch
    - continue-on-error: true
      name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
        file: tests/tests_pytorch/coverage.xml
        flags: ${{ env.COVERAGE_SCOPE }},cpu,pytest-full,python${{ matrix.python-version
          }},pytorch${{ matrix.pytorch-version }}
        name: CPU-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macOS-14
          pkg-name: lightning
          python-version: '3.10'
          pytorch-version: '2.1'
        - os: ubuntu-20.04
          pkg-name: lightning
          python-version: '3.10'
          pytorch-version: '2.1'
        - os: windows-2022
          pkg-name: lightning
          python-version: '3.10'
          pytorch-version: '2.1'
        - os: macOS-14
          pkg-name: lightning
          python-version: '3.11'
          pytorch-version: '2.2'
        - os: ubuntu-20.04
          pkg-name: lightning
          python-version: '3.11'
          pytorch-version: '2.2'
        - os: windows-2022
          pkg-name: lightning
          python-version: '3.11'
          pytorch-version: '2.2'
        - os: macOS-14
          pkg-name: lightning
          python-version: '3.11'
          pytorch-version: '2.3'
        - os: ubuntu-20.04
          pkg-name: lightning
          python-version: '3.11'
          pytorch-version: '2.3'
        - os: windows-2022
          pkg-name: lightning
          python-version: '3.11'
          pytorch-version: '2.3'
        - os: macOS-14
          pkg-name: lightning
          python-version: '3.12'
          pytorch-version: '2.4'
        - os: ubuntu-20.04
          pkg-name: lightning
          python-version: '3.12'
          pytorch-version: '2.4'
        - os: windows-2022
          pkg-name: lightning
          python-version: '3.12'
          pytorch-version: '2.4'
        - os: macOS-12
          pkg-name: pytorch
          python-version: '3.10'
          pytorch-version: '2.1'
        - os: ubuntu-22.04
          pkg-name: pytorch
          python-version: '3.10'
          pytorch-version: '2.1'
        - os: windows-2022
          pkg-name: pytorch
          python-version: '3.10'
          pytorch-version: '2.1'
        - os: macOS-13
          pkg-name: lightning
          python-version: '3.9'
          pytorch-version: '2.1'
          requires: oldest
        - os: ubuntu-20.04
          pkg-name: lightning
          python-version: '3.9'
          pytorch-version: '2.1'
          requires: oldest
        - os: windows-2022
          pkg-name: lightning
          python-version: '3.9'
          pytorch-version: '2.1'
          requires: oldest
        - os: macOS-14
          pkg-name: pytorch
          python-version: '3.9'
          pytorch-version: '2.1'
        - os: ubuntu-20.04
          pkg-name: pytorch
          python-version: '3.9'
          pytorch-version: '2.1'
        - os: windows-2022
          pkg-name: pytorch
          python-version: '3.9'
          pytorch-version: '2.1'
    timeout-minutes: 50
