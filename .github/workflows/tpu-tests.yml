name: Test PyTorch - TPU
true:
  pull_request_target:
    branches:
    - master
    - release/*
    types:
    - opened
    - reopened
    - ready_for_review
    - labeled
    - synchronize
  push:
    branches:
    - master
    - release/*
concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
defaults:
  run:
    shell: bash
jobs:
  test-on-tpus:
    env:
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
      PR_NUMBER: ${{ github.event.pull_request.number && github.event.pull_request.number
        || 'master' }}
      SHA: ${{ github.event.pull_request.head.sha && github.event.pull_request.head.sha
        || github.sha }}
      XLA_VER: '2.0'
    if: '(github.event_name == ''push'' && github.ref == ''refs/heads/master'') ||

      (startsWith(github.event_name, ''pull_request'') && contains(github.event.pull_request.labels.*.name,
      ''run TPU''))

      '
    runs-on: ubuntu-22.04
    steps:
    - name: Set env
      run: "# define --zone: https://cloud.google.com/tpu/docs/regions-zones\nif [[\
        \ \"${{ matrix.accelerator_type }}\" == v4* ]]; then\n  echo \"CLOUDSDK_COMPUTE_ZONE=us-central2-b\"\
        \ >> $GITHUB_ENV\nelse\n  echo \"CLOUDSDK_COMPUTE_ZONE=us-west4-a\" >> $GITHUB_ENV\n\
        fi\n"
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: listendev/action@v0.11
      with:
        ci: only
        jwt: ${{ secrets.LSTN }}
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY_BASE64 }}
    - uses: google-github-actions/setup-gcloud@v2
    - if: always()
      name: Time-based job cleanup
      run: "gcloud compute tpus tpu-vm list --format='value(name,createTime)' > creation_times.txt\n\
        cat creation_times.txt\n\nif [ ! -s \"creation_times.txt\" ]; then\n  echo\
        \ \"No existing jobs\"\n  exit 0\nfi\n\njobs_deleted=false\nwhile read -r\
        \ job_name created_at; do\n  # Skip jobs with \"keepalive\" in the name\n\
        \  if [[ \"$job_name\" == *\"keepalive\"* ]]; then\n    echo \"Skipping $job_name,\
        \ has keepalive in name\"\n    continue\n  fi\n\n  # Convert the creation\
        \ time to Unix timestamp\n  created_timestamp=$(date -d \"${created_at}\"\
        \ +%s)\n\n  # Calculate the difference between the current time and the creation\
        \ time\n  current_timestamp=$(date +%s)\n  age=$((current_timestamp - created_timestamp))\n\
        \n  # Check if the age has surpassed a timeout\n  if ((age > 35 * 60)); then\n\
        \    # delete the job\n    gcloud compute tpus tpu-vm delete \"$job_name\"\
        \ --async\n    jobs_deleted=true\n  else\n    echo \"Skipping $job_name, alive\
        \ for $age seconds\"\n  fi\ndone < creation_times.txt\n\nif [ \"$jobs_deleted\"\
        \ = true ]; then\n  sleep 5\n  # diagnostics\n  gcloud compute tpus tpu-vm\
        \ list\nfi\n"
    - name: Update script
      run: "import os\nfname = f'tests/tests_${{ matrix.pkg-name }}/run_tpu_tests.sh'\n\
        with open(fname) as fopen:\n    data = fopen.read()\ndata = data.replace('{PYTORCH_VERSION}',\
        \ os.environ[\"XLA_VER\"])\nprint(data)\nwith open(fname, \"w\") as fopen:\n\
        \    fopen.write(data)\n"
      shell: python
    - continue-on-error: true
      env:
        JOB_NAME: ${{ env.PR_NUMBER }}-${{ matrix.pkg-name }}-${{ matrix.accelerator_type
          }}-${{ env.SHA }}
      id: tpu-create
      name: Create node
      run: "if [[ \"${{ matrix.accelerator_type }}\" == v4* ]]; then\n  gcloud compute\
        \ tpus tpu-vm create \"$JOB_NAME\" \\\n    --accelerator-type=${{ matrix.accelerator_type\
        \ }} \\\n    --version=\"tpu-vm-v4-pt-$XLA_VER\" \\\n    --preemptible\nfi\n"
    - env:
        JOB_NAME: ${{ env.PR_NUMBER }}-${{ matrix.pkg-name }}-${{ matrix.accelerator_type
          }}-${{ env.SHA }}
      if: steps.tpu-create.outcome == 'success'
      name: Run tests
      run: 'set -uex


        # zip-copy-unzip the repository

        zip -q -r repo.zip . -x .git/

        gcloud compute tpus tpu-vm scp --worker=all repo.zip "$JOB_NAME":~

        gcloud compute tpus tpu-vm ssh "$JOB_NAME" --worker=all --command="cd ~; unzip
        -q -o repo.zip"


        # run script

        gcloud compute tpus tpu-vm ssh "$JOB_NAME" --worker=all --command="cd ~; bash
        tests/tests_${{ matrix.pkg-name }}/run_tpu_tests.sh"

        exit_code=$?


        # pull out the coverage file

        gcloud compute tpus tpu-vm scp "$JOB_NAME":~/coverage.xml .


        exit $exit_code

        '
    - env:
        JOB_NAME: ${{ env.PR_NUMBER }}-${{ matrix.pkg-name }}-${{ matrix.accelerator_type
          }}-${{ env.SHA }}
      if: always()
      name: Cleanup job
      run: "if ! gcloud compute tpus tpu-vm list | grep -q \"$JOB_NAME\"; then\n \
        \ echo \"$JOB_NAME wasn't created\"\n  exit 0\nfi\n\n# diagnostics\ngcloud\
        \ compute tpus tpu-vm describe \"$JOB_NAME\"\n\n# delete the job\ngcloud compute\
        \ tpus tpu-vm delete \"$JOB_NAME\" --async\nsleep 5\n\n# diagnostics\ngcloud\
        \ compute tpus tpu-vm list\n"
    - continue-on-error: true
      name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
        file: coverage.xml
        flags: tpu,pytest
        name: TPU-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        accelerator_type:
        - v4-8
        pkg-name:
        - fabric
        - pytorch
    timeout-minutes: 30
